services:
    web:
        build: .
        container_name: laboratorio_02
        env_file:
            - ./.env
        # Depende de la BD para asegurar que esté lista
        depends_on:
            - db
        volumes:
            # Montaje para desarrollo
            - ./app:/app
        expose:
            - "5000"
        # El API necesita acceso a AMBAS redes
        networks:
            - backend_network # Para hablar con la BD
            - frontend_network # Para hablar con Nginx

    db:
        image: mysql:8.0
        container_name: mysql_db
        restart: always
        environment:
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        ports:
            # Mantenemos el puerto mapeado para acceso directo
            - "3307:3306"
        volumes:
            - mysql_data:/var/lib/mysql
        # La BD SOLO está en la red privada
        networks:
            - backend_network

    nginx:
        image: nginx:latest
        container_name: nginx_server
        ports:
            # Único punto de entrada: 8080 del host al 80 del contenedor Nginx
            - "8080:80"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
        # Depende del API para asegurar que esté listo para el proxy
        depends_on:
            - web
        # Nginx SOLO está en la red pública
        networks:
            - frontend_network

volumes:
    mysql_data:

networks:
    # Red para el tráfico interno y seguro (BD <--> API)
    backend_network:
        driver: bridge
    # Red para el tráfico de acceso (Nginx <--> API)
    frontend_network:
        driver: bridge
